// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.mgr.domain;

import com.ruyicai.mgr.domain.CaseLot;
import java.lang.String;
import java.math.BigDecimal;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;

privileged aspect CaseLot_Roo_Finder {
    
    public static TypedQuery<CaseLot> CaseLot.findCaseLotsByLotnoAndBatchcodeAndState(String lotno, String batchcode, BigDecimal state) {
        if (lotno == null || lotno.length() == 0) throw new IllegalArgumentException("The lotno argument is required");
        if (batchcode == null || batchcode.length() == 0) throw new IllegalArgumentException("The batchcode argument is required");
        if (state == null) throw new IllegalArgumentException("The state argument is required");
        EntityManager em = CaseLot.entityManager();
        TypedQuery<CaseLot> q = em.createQuery("SELECT o FROM CaseLot AS o WHERE o.lotno = :lotno AND o.batchcode = :batchcode AND o.state = :state", CaseLot.class);
        q.setParameter("lotno", lotno);
        q.setParameter("batchcode", batchcode);
        q.setParameter("state", state);
        return q;
    }
    
    public static TypedQuery<CaseLot> CaseLot.findCaseLotsByLotnoAndState(String lotno, BigDecimal state) {
        if (lotno == null || lotno.length() == 0) throw new IllegalArgumentException("The lotno argument is required");
        if (state == null) throw new IllegalArgumentException("The state argument is required");
        EntityManager em = CaseLot.entityManager();
        TypedQuery<CaseLot> q = em.createQuery("SELECT o FROM CaseLot AS o WHERE o.lotno = :lotno AND o.state = :state", CaseLot.class);
        q.setParameter("lotno", lotno);
        q.setParameter("state", state);
        return q;
    }
    
    public static TypedQuery<CaseLot> CaseLot.findCaseLotsByStarter(String starter) {
        if (starter == null || starter.length() == 0) throw new IllegalArgumentException("The starter argument is required");
        EntityManager em = CaseLot.entityManager();
        TypedQuery<CaseLot> q = em.createQuery("SELECT o FROM CaseLot AS o WHERE o.starter = :starter", CaseLot.class);
        q.setParameter("starter", starter);
        return q;
    }
    
}
