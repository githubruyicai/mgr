// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.mgr.domain;

import com.ruyicai.mgr.domain.Tlotmap;
import com.ruyicai.mgr.domain.TlotmapPK;
import java.util.List;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Tlotmap_Roo_Entity {
    
    declare @type: Tlotmap: @Entity;
    
    declare @type: Tlotmap: @Table(name = "TLOTMAP", schema = "JRTSCH");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager Tlotmap.entityManager;
    
    @EmbeddedId
    private TlotmapPK Tlotmap.id;
    
    public TlotmapPK Tlotmap.getId() {
        return this.id;
    }
    
    public void Tlotmap.setId(TlotmapPK id) {
        this.id = id;
    }
    
    @Transactional
    public void Tlotmap.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Tlotmap.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Tlotmap attached = Tlotmap.findTlotmap(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Tlotmap.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Tlotmap.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Tlotmap Tlotmap.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Tlotmap merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Tlotmap.entityManager() {
        EntityManager em = new Tlotmap().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Tlotmap.countTlotmaps() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Tlotmap o", Long.class).getSingleResult();
    }
    
    public static List<Tlotmap> Tlotmap.findAllTlotmaps() {
        return entityManager().createQuery("SELECT o FROM Tlotmap o", Tlotmap.class).getResultList();
    }
    
    public static Tlotmap Tlotmap.findTlotmap(TlotmapPK id) {
        if (id == null) return null;
        return entityManager().find(Tlotmap.class, id);
    }
    
    public static List<Tlotmap> Tlotmap.findTlotmapEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Tlotmap o", Tlotmap.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
