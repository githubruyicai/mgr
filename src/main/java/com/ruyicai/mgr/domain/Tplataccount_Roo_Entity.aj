// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.mgr.domain;

import com.ruyicai.mgr.domain.Tplataccount;
import java.lang.String;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Tplataccount_Roo_Entity {
    
    declare @type: Tplataccount: @Entity;
    
    declare @type: Tplataccount: @Table(name = "TPLATACCOUNT", schema = "JRTSCH");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager Tplataccount.entityManager;
    
    @Transactional
    public void Tplataccount.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Tplataccount attached = Tplataccount.findTplataccount(this.agencyno);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Tplataccount.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Tplataccount.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    public static final EntityManager Tplataccount.entityManager() {
        EntityManager em = new Tplataccount().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Tplataccount.countTplataccounts() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Tplataccount o", Long.class).getSingleResult();
    }
    
    public static List<Tplataccount> Tplataccount.findAllTplataccounts() {
        return entityManager().createQuery("SELECT o FROM Tplataccount o", Tplataccount.class).getResultList();
    }
    
    public static Tplataccount Tplataccount.findTplataccount(String agencyno) {
        if (agencyno == null || agencyno.length() == 0) return null;
        return entityManager().find(Tplataccount.class, agencyno);
    }
    
    public static List<Tplataccount> Tplataccount.findTplataccountEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Tplataccount o", Tplataccount.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
