// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.ruyicai.mgr.domain.statis;

import com.ruyicai.mgr.domain.statis.Yw;
import java.util.List;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Table;
import org.springframework.transaction.annotation.Transactional;

privileged aspect Yw_Roo_Entity {
    
    declare @type: Yw: @Entity;
    
    declare @type: Yw: @Table(name = "YW", schema = "JRTSTATIS");
    
    @PersistenceContext(unitName = "persistenceUnit")
    transient EntityManager Yw.entityManager;
    
    @Transactional
    public void Yw.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void Yw.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            Yw attached = Yw.findYw(this.id);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void Yw.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void Yw.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public Yw Yw.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        Yw merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
    public static final EntityManager Yw.entityManager() {
        EntityManager em = new Yw().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static long Yw.countYws() {
        return entityManager().createQuery("SELECT COUNT(o) FROM Yw o", Long.class).getSingleResult();
    }
    
    public static List<Yw> Yw.findAllYws() {
        return entityManager().createQuery("SELECT o FROM Yw o", Yw.class).getResultList();
    }
    
    public static Yw Yw.findYw(int id) {
        return entityManager().find(Yw.class, id);
    }
    
    public static List<Yw> Yw.findYwEntries(int firstResult, int maxResults) {
        return entityManager().createQuery("SELECT o FROM Yw o", Yw.class).setFirstResult(firstResult).setMaxResults(maxResults).getResultList();
    }
    
}
